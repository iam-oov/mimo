#!/usr/bin/env python3
"""
M√≥dulo para generar recomendaciones fiscales usando IA
Sigue los principios SOLID para mantener c√≥digo limpio y extensible
"""

import os
from abc import ABC, abstractmethod
from typing import Dict, Any, Generator
import google.generativeai as genai
from tabla_isr_constants import get_tabla_isr
from dotenv import load_dotenv

load_dotenv()


class RecommendationGenerator(ABC):
    """
    Interfaz abstracta para generadores de recomendaciones fiscales
    Principio: Interface Segregation Principle (ISP)
    """

    @abstractmethod
    def generate_recommendations_stream(
        self, calculation_result: Any, user_data: Dict[str, Any], fiscal_year: int
    ) -> Generator[str, None, None]:
        """Genera recomendaciones fiscales personalizadas con streaming"""
        pass


class FallbackRecommendationGenerator(RecommendationGenerator):
    """
    Generador de recomendaciones por defecto
    Principio: Single Responsibility Principle (SRP)
    """

    def generate_recommendations_stream(
        self, calculation_result: Any, user_data: Dict[str, Any], fiscal_year: int
    ):
        """Genera recomendaciones fiscales por defecto como stream simulado en formato Markdown"""
        recommendations_markdown = """
### 1. **Maximizar deducciones personales**

Aseg√∫rate de conservar todos los comprobantes fiscales de gastos m√©dicos, dentales, gastos funerarios, donativos, intereses reales de cr√©ditos hipotecarios y primas de seguros de gastos m√©dicos mayores para el pr√≥ximo ejercicio fiscal.

> üí° **Ejemplo para tu situaci√≥n:**
> Con tus ingresos actuales, puedes deducir hasta el 15% en gastos m√©dicos y generales, lo que te generar√≠a un ahorro fiscal significativo.

---

### 2. **Planificaci√≥n de inversiones (PPR)**

Considera abrir una cuenta de ahorro para el retiro (PPR) que te permita deducir hasta 5 UMAs anuales, reduciendo tu base gravable y generando rendimientos a largo plazo con beneficios fiscales.

> üí° **Ejemplo para tu situaci√≥n:**
> Puedes deducir hasta 10% de tus ingresos en PPR, lo que reducir√≠a tu base gravable considerablemente.

---

### 3. **Estrategia de colegiaturas**

Si tienes gastos educativos, verifica que las instituciones est√©n autorizadas por la SEP y que los montos no excedan los topes establecidos por nivel educativo para maximizar esta deducci√≥n.

---

### 4. **Optimizaci√≥n de retenciones**

Revisa con tu empleador la posibilidad de ajustar las retenciones mensuales para evitar retenciones excesivas que generen saldos a favor importantes.

---

### 5. **Documentaci√≥n y cumplimiento**

Mant√©n un archivo digital organizado de todos tus comprobantes fiscales y considera usar herramientas de gesti√≥n fiscal para automatizar el seguimiento de deducciones durante el a√±o.

---

### 6. **Consulta especializada**

Dada la complejidad de tu situaci√≥n fiscal, considera una consulta con un contador p√∫blico certificado para identificar oportunidades espec√≠ficas de optimizaci√≥n fiscal.
        """

        # Simular streaming devolviendo todo el contenido de una vez
        yield recommendations_markdown.strip()


class GeminiRecommendationGenerator(RecommendationGenerator):
    """
    Generador de recomendaciones usando Gemini AI de Google
    Principio: Single Responsibility Principle (SRP) y Dependency Inversion Principle (DIP)
    """

    def __init__(self, api_key: str | None = None):
        """
        Inicializa el generador con la API key de Gemini

        Args:
            api_key: API key de Google Gemini. Si no se proporciona, se intenta obtener de variables de entorno
        """
        self.api_key = api_key or os.getenv("GEMINI_API_KEY")

        if not self.api_key:
            raise ValueError(
                "API key de Google Gemini no encontrada. "
                "Proporciona api_key o configura la variable de entorno GEMINI_API_KEY"
            )

        # Configurar Gemini
        try:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel("gemini-2.5-pro")
        except Exception:
            self.model = None

    def _get_isr_data(self, fiscal_year: int):
        """
        Obtiene los datos ISR para el a√±o fiscal especificado

        Args:
            fiscal_year: A√±o fiscal

        Returns:
            TablaISR con la informaci√≥n fiscal del a√±o
        """
        return get_tabla_isr(fiscal_year)

    def generate_recommendations_stream(
        self, calculation_result: Any, user_data: Dict[str, Any], fiscal_year: int
    ):
        """
        Genera recomendaciones fiscales usando Gemini AI con streaming

        Args:
            calculation_result: Resultado del c√°lculo fiscal
            user_data: Datos del contribuyente
            fiscal_year: A√±o fiscal

        Yields:
            Fragmentos de texto de las recomendaciones en tiempo real
        """
        if not self.model:
            raise ValueError("Gemini API key not configured")

        prompt = self._create_prompt(calculation_result, user_data, fiscal_year)

        try:
            response = self.model.generate_content(prompt, stream=True)

            accumulated_text = ""
            for chunk in response:
                if chunk.text:
                    accumulated_text += chunk.text
                    yield chunk.text

        except Exception as e:
            raise RuntimeError(f"Error generating recommendations with Gemini: {e}")

    def _create_prompt(
        self, calculation_result: Any, user_data: Dict[str, Any], fiscal_year: int
    ) -> str:
        """
        Crea el prompt contextualizado para Gemini
        Principio: Single Responsibility Principle (SRP)
        """
        ingresos = user_data["ingresos"]
        contribuyente = user_data["contribuyente"]
        tabla_isr = self._get_isr_data(fiscal_year)

        # Extraer informaci√≥n relevante de la tabla ISR
        constantes = tabla_isr.constantes
        topes_colegiaturas = tabla_isr.topes_colegiaturas

        return f"""
        Eres un "Gatito Fiscal" üê±, un gato profesional asesor fiscal mexicano especializado en optimizaci√≥n fiscal para personas f√≠sicas. 
        Te presentas como un asesor experto que ayuda a maximizar el saldo a favor de sus clientes.
        Tienes un tono profesional pero con personalidad gatuna, usando expresiones como "miau", "purr-fecto", "gat-rantizo", "es-paw-cialmente" de manera elegante.
        Tu misi√≥n es analizar la situaci√≥n fiscal y dar exactamente 5 consejos estrat√©gicos para AUMENTAR EL SALDO A FAVOR.

        ## DATOS DEL CONTRIBUYENTE:
        - **Nombre:** {contribuyente.get("nombre_o_referencia", "No especificado")}
        - **Ejercicio fiscal:** {fiscal_year}
        - **Ingreso bruto anual:** ${calculation_result.gross_annual_income:,.2f}
        - **Ingreso gravado total:** ${calculation_result.total_taxable_income:,.2f}
        - **Deducciones actuales:** ${calculation_result.authorized_deductions:,.2f}
        - **Base gravable:** ${calculation_result.taxable_base:,.2f}
        - **Impuesto determinado:** ${calculation_result.determined_tax:,.2f}
        - **Impuesto retenido:** ${calculation_result.withheld_tax:,.2f}
        - **Saldo a favor:** ${calculation_result.balance_in_favor:,.2f}
        - **Saldo a pagar:** ${calculation_result.balance_to_pay:,.2f}

        ## CONTEXTO ADICIONAL:
        - **Ingreso mensual ordinario:** ${ingresos.get("ingreso_bruto_mensual_ordinario", 0):,.2f}
        - **D√≠as de aguinaldo:** {ingresos.get("dias_aguinaldo", 0)}
        - **D√≠as de vacaciones:** {ingresos.get("dias_vacaciones_anuales", 0)}

        ## L√çMITES Y TOPES FISCALES OFICIALES {fiscal_year}:
        - **UMA diario:** ${constantes.valor_uma_diario:,.2f}
        - **UMA anual:** ${constantes.valor_uma_anual:,.2f}
        - **Tope deducciones generales:** {constantes.tope_general_deducciones_umas} UMAs = ${constantes.valor_uma_anual * constantes.tope_general_deducciones_umas:,.2f}
        - **Tope PPR/Afore:** {constantes.tope_ppr_deducciones_umas} UMAs = ${constantes.valor_uma_anual * constantes.tope_ppr_deducciones_umas:,.2f}
        - **Exenci√≥n aguinaldo:** {constantes.exencion_aguinaldo_umas} UMAs = ${constantes.valor_uma_anual * constantes.exencion_aguinaldo_umas / 365:,.2f} diarios
        - **Exenci√≥n prima vacacional:** {constantes.exencion_prima_vacacional_umas} UMAs = ${constantes.valor_uma_anual * constantes.exencion_prima_vacacional_umas / 365:,.2f} diarios
        
        ### TOPES COLEGIATURAS {fiscal_year}:
        - **Preescolar:** ${topes_colegiaturas.preescolar:,.2f}
        - **Primaria:** ${topes_colegiaturas.primaria:,.2f}
        - **Secundaria:** ${topes_colegiaturas.secundaria:,.2f}
        - **Profesional t√©cnico:** ${topes_colegiaturas.profesional_tecnico:,.2f}
        - **Preparatoria:** ${topes_colegiaturas.preparatoria:,.2f}

        ## INSTRUCCIONES:
        1. Pres√©ntate brevemente como "Mimo el Gatito Fiscal", y tu asesor profesional
        2. Analiza la situaci√≥n fiscal espec√≠fica de este contribuyente
        3. IMPORTANTE: Eval√∫a si ya est√°n maximizadas ciertas deducciones usando los L√çMITES OFICIALES:
           - Si deducciones generales ya son ‚â•${constantes.valor_uma_anual * constantes.tope_general_deducciones_umas:,.0f} ({constantes.tope_general_deducciones_umas} UMAs), NO recomiendes incrementarlas
           - Si PPR/Afore ya est√° al m√°ximo ${constantes.valor_uma_anual * constantes.tope_ppr_deducciones_umas:,.0f} ({constantes.tope_ppr_deducciones_umas} UMAs), NO recomiendes m√°s contribuciones
           - Si colegiaturas est√°n en los topes oficiales mostrados arriba, NO recomiendes aumentarlas
           - Usa los valores EXACTOS de UMA y topes oficiales en tus c√°lculos
        4. Proporciona EXACTAMENTE 5 consejos estrat√©gicos RELEVANTES para AUMENTAR EL SALDO A FAVOR
        5. Cada consejo debe ser ESPEC√çFICO, PR√ÅCTICO y con n√∫meros basados en su situaci√≥n
        6. Considera las leyes fiscales mexicanas vigentes para {fiscal_year + 1}
        7. Enf√≥cate en estrategias legales para maximizar deducciones y minimizar impuestos
        
        ## FORMATO DE RESPUESTA:
        IMPORTANTE: Estructura tu respuesta exactamente as√≠:
        
        1. **Saludo gatuno breve seg√∫n la hora:**
        - Si es ma√±ana (6:00-11:59): "¬°Miau-nos d√≠as!" o "¬°Buenos d√≠as! üê±"
        - Si es tarde (12:00-18:59): "¬°Buenas tar-des!" o "¬°Buenas tardes! üêæ"
        - Si es noche (19:00-5:59): "¬°Buenas no-ches!" o "¬°Buenas noches! üò∏"
        
        2. **Presentaci√≥n breve (1 l√≠nea):**
        "Soy Mimo el Gatito Fiscal üê± y tu asesor profesional, y te dar√© consejos purr-fectos para aumentar tu saldo a favor:"
        
        3. **Da 4 o 5 consejos numerados** usando toques gatunos sutiles como: "purr-fecto", "gat-rantizo", "es-paw-cialmente", "feli-nanzas", "miau-ravilloso"
        
        Para cada uno de los consejos usa esta estructura:
        ### [n√∫mero]. **[T√≠tulo del consejo para aumentar saldo a favor]**
        
        [Explicaci√≥n de c√≥mo este consejo espec√≠ficamente AUMENTAR√Å su saldo a favor]
        
        > **C√°lculo purr-fecto para ti:**
        > [Ejemplo con n√∫meros exactos de cu√°nto AUMENTAR√çA su saldo a favor con este consejo, basado en sus ${calculation_result.gross_annual_income:,.0f} de ingresos anuales]
        
        ---
        
        ## CONSEJOS ESPEC√çFICOS PARA AUMENTAR SALDO A FAVOR:
        ANALIZA PRIMERO LA SITUACI√ìN ACTUAL:
        - Deducciones actuales: ${calculation_result.authorized_deductions:,.0f}
        - L√≠mite deducciones generales (15%): ${calculation_result.gross_annual_income * 0.15:,.0f}
        - L√≠mite PPR (10%): ${calculation_result.gross_annual_income * 0.10:,.0f}
        - L√≠mite colegiaturas seg√∫n nivel educativo.

        SOLO RECOMIENDA ESTRATEGIAS RELEVANTES Y VIABLES:
        - NO recomiendes deducciones generales si ya superan el 15% del ingreso
        - NO recomiendes PPR si ya est√° al m√°ximo
        - Enf√≥cate en oportunidades reales de mejora
        - Incluye estrategias de planeaci√≥n fiscal para el pr√≥ximo ejercicio
        - Sugiere optimizaci√≥n de retenciones espec√≠fica para su situaci√≥n
        - Considera inversiones deducibles alternativas
        - Explora gastos m√©dicos especializados no utilizados
        """

    def _process_response(self, response_text: str) -> str:
        """
        Procesa la respuesta de Gemini manteni√©ndola en formato Markdown
        Principio: Single Responsibility Principle (SRP)
        """
        response_text = response_text.strip()

        if not response_text:
            return "**Error procesando recomendaciones:** No se pudieron procesar las recomendaciones de IA correctamente."

        return response_text


class RecommendationService:
    """
    Servicio principal para generar recomendaciones fiscales
    Principios: Dependency Inversion Principle (DIP) y Open/Closed Principle (OCP)
    """

    def __init__(
        self,
        primary_generator: RecommendationGenerator,
        fallback_generator: RecommendationGenerator,
    ):
        """
        Inicializa el servicio con generadores primario y de respaldo

        Args:
            primary_generator: Generador principal (ej: Gemini)
            fallback_generator: Generador de respaldo (recomendaciones por defecto)
        """
        self.primary_generator = primary_generator
        self.fallback_generator = fallback_generator

    def get_recommendations_stream(
        self, calculation_result: Any, user_data: Dict[str, Any], fiscal_year: int
    ):
        """
        Obtiene recomendaciones fiscales con streaming usando solo el generador primario

        Args:
            calculation_result: Resultado del c√°lculo fiscal
            user_data: Datos del contribuyente
            fiscal_year: A√±o fiscal

        Yields:
            Fragmentos de texto de las recomendaciones en tiempo real
        """
        print("ü§ñ Generando recomendaciones fiscales personalizadas con streaming...")

        for chunk in self.primary_generator.generate_recommendations_stream(
            calculation_result, user_data, fiscal_year
        ):
            yield chunk

        print("‚úÖ Recomendaciones generadas exitosamente")


class RecommendationFactory:
    """
    Factory para crear servicios de recomendaciones
    Principio: Factory Pattern y Single Responsibility Principle (SRP)
    """

    @staticmethod
    def create_service(
        use_ai: bool = True, api_key: str | None = None
    ) -> RecommendationService:
        """
        Crea un servicio de recomendaciones configurado

        Args:
            use_ai: Si usar IA (Gemini) como generador primario
            api_key: Clave de API de Gemini

        Returns:
            Servicio de recomendaciones configurado
        """
        fallback_generator = FallbackRecommendationGenerator()

        if use_ai:
            try:
                primary_generator = GeminiRecommendationGenerator(api_key)
                return RecommendationService(primary_generator, fallback_generator)
            except Exception as e:
                print(f"‚ö†Ô∏è  No se pudo configurar Gemini: {e}")
                print("üîÑ Usando solo recomendaciones por defecto...")

        # Si no se puede usar IA, usar fallback como primario
        return RecommendationService(fallback_generator, fallback_generator)
